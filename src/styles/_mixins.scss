

@import 'mixins/poly_fluid_sizing';
@import 'mixins/custom';
/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
	@if $self {
		&,
		&:hover,
		&:focus {
			@content;
		}
	} @else {
		&:hover,
		&:focus {
			@content;
		}
	}
}

/// Clears floats via mixin
/// @author Nicolas Gallagher
/// @link http://nicolasgallagher.com/micro-clearfix-hack/
@mixin clearfix() {
	&:before,
	&:after {
		content: ' ';
		display: table;
	}
	&:after {
		clear: both;
	}
}

@mixin force-one-line {
	overflow: hidden;
	white-space: nowrap;
}

@mixin aspect-ratio($width, $height, $spacerElement: '&:before') {
	@if $spacerElement == '&:before' {
		position: relative;
		&:before {
			display: block;
			content: '';
			width: 100%;
			padding-top: math.div($height, $width) * 100%;
		}
		> .aspect-content {
			position: absolute;
			top: 0;
			left: 0;
			right: 0;
			bottom: 0;
			width: 100%;
			height: 100%;
		}
	} @else {
		#{$spacerElement} {
			position: relative;
			display: block;
			width: 100%;
			padding-top: math.div($height, $width) * 100%;
			> .aspect-content {
				position: absolute;
				top: 0;
				left: 0;
				right: 0;
				bottom: 0;
				width: 100%;
				height: 100%;
			}
		}
	}
}

/**
* Sass CSS triangle mixin, create any kind of triangles with ease

* Use:
* @include triangle(direction,width,height,color);

* Example:
* $square: 50px;
* $color: red;
* selector {
*	 @include triangle(bottomright,$square,$square,$color);
* }

* Forked from https://github.com/juanbrujo/triangle-mixin.less
*/

@mixin triangle($direction, $sizeH, $sizeV, $color) {
	content: '';
	display: block;
	width: 0;
	height: 0;
	border-style: solid;
	-moz-transform: scale(0.9999);

	@if $direction == top {
		border-width: 0 $sizeV $sizeH $sizeV;
		border-color: transparent transparent $color transparent;
	}
	@if $direction == bottom {
		border-width: $sizeH $sizeV 0 $sizeV;
		border-color: $color transparent transparent transparent;
	}
	@if $direction == left {
		border-width: $sizeV $sizeH $sizeV 0;
		border-color: transparent $color transparent transparent;
	}
	@if $direction == right {
		border-width: $sizeV 0 $sizeV $sizeH;
		border-color: transparent transparent transparent $color;
	}
	@if $direction == topright {
		border-width: 0 $sizeH $sizeV 0;
		border-color: transparent $color transparent transparent;
	}
	@if $direction == bottomright {
		border-width: 0 0 $sizeH $sizeV;
		border-color: transparent transparent $color transparent;
	}
	@if $direction == bottomleft {
		border-width: $sizeH 0 0 $sizeV;
		border-color: transparent transparent transparent $color;
	}
	@if $direction == topleft {
		border-width: $sizeH $sizeV 0 0;
		border-color: $color transparent transparent transparent;
	}
}
//
//  MEDIA QUERIES
//––––––––––––––––––––––––––––––––––––––––––––––––––

// A map of breakpoints.
$breakpoints: (
  xs: 476px,
  sm: 637px,
  md: 992px,
  lg: 1200px,
  xl: 1400px,
  xxl: 1900px
);


//
//  RESPOND ABOVE
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-above(sm) {}
@mixin respond-above($breakpoint) {

  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {

    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (min-width: $breakpoint-value) {
      @content;
    }
  
  // If the breakpoint doesn't exist in the map.
  } @else {

    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}


//
//  RESPOND BELOW
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-below(sm) {}
@mixin respond-below($breakpoint) {

  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {

    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }
  
  // If the breakpoint doesn't exist in the map.
  } @else {

    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}


//
//  RESPOND BETWEEN
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-between(sm, md) {}
@mixin respond-between($lower, $upper) {

  // If both the lower and upper breakpoints exist in the map.
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {

    // Get the lower and upper breakpoints.
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);

    // Write the media query.
    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }
  
  // If one or both of the breakpoints don't exist.
  } @else {

    // If lower breakpoint is invalid.
    @if (map-has-key($breakpoints, $lower) == false) {

      // Log a warning.
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }

    // If upper breakpoint is invalid.
    @if (map-has-key($breakpoints, $upper) == false) {

      // Log a warning.
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}